#!/usr/bin/env node

'use strict'

var Promise = require('bluebird')

var chalk = require('chalk')
var cmd = require('commander')
var fs = Promise.promisifyAll(require('fs'))
var path = require('path')
var pkg = require('../package.json')
var expand = require('..')

cmd
  .version(pkg.version)
  .usage('[options] <files ...>')
  .option('-s, --schema [name]', 'expand schema name (log, request, response, etc ...)')
  .parse(process.argv)

if (!cmd.args.length) {
  cmd.help()
}

// default function to call
var func = expand

if (cmd.schema) {
  func = expand[cmd.schema]
}

cmd.args.map(function (fileName) {
  var file = chalk.yellow.italic(path.basename(fileName))

  fs.readFileAsync(fileName)
    .then(JSON.parse)
    .then(function (data) {
      return func.call(null, data)
    })
    .then(function (output) {
      console.log('%s [%s] is valid:\n%s', chalk.green('✓'), file, JSON.stringify(output, null, 2))
    })
    .catch(SyntaxError, function (e) {
      console.error('%s [%s] failed to read JSON: %s', chalk.red('✖'), file, chalk.red(e.message))
    })
    .catch(function (e) {
      if (e.errors) {
        e.errors.forEach(function (err) {
          console.error('%s %s failed validation: (%s: %s) %s', chalk.red('✖'), chalk.cyan.bold(file), chalk.cyan.italic(err.field), chalk.magenta.italic(err.value), chalk.red(err.message))
        })
      } else {
        console.error('%s %s fail: %s', chalk.red('✖'), chalk.cyan.bold(file), chalk.red(e.message))
      }
    })
})
